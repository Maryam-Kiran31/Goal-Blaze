@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GoalManagement.Data


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<PageTitle>Log in</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />
                <h3 class="text-center mb-4 p-3 bg-light rounded d-none d-md-block"
                    style="white-space: nowrap; color: black; -webkit-text-stroke: 1px #654ea3;">
                    Log in
                </h3>
                <div class="form-floating">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="form-check mb-3">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                    <label class="form-check-label">Remember me</label>
                </div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                <div class="mt-3 text-center">
                    <p><a href="Account/ForgotPassword">Forgot your password?</a></p>
                    <p><a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a></p>
                    <p><a href="Account/ResendEmailConfirmation">Resend email confirmation</a></p>
                </div>
            </EditForm>
        </section>
    </div>
</div>
<style>
    /* login.css */
    body {
        background-color: #f8f9fa; /* Light background */
        font-family: Arial, sans-serif; /* Clean font */
    }

    h1 {
        text-align: center;
        margin-bottom: 1.5rem;
        color: #343a40; /* Dark text color */
    }

    form {
        background-color: #ffffff; /* White background */
        padding: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
    }

    .form-floating {
        margin-bottom: 1.5rem;
    }

        .form-floating label {
            color: #6c757d; /* Muted label color */
        }


    .text-danger {
        font-size: 0.875rem; /* Smaller text size for errors */
    }

    .checkbox label {
        font-size: 0.875rem; /* Slightly smaller text */
    }

    a {
        color: mediumpurple;
        text-decoration: none;
    }

        a:hover {
            text-decoration: underline;
        }

</style>
@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}


